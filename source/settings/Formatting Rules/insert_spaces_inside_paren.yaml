%YAML 1.2
---
# https://learnxinyminutes.com/docs/yaml/
definitions:

    # This is the rule loaded class this configuration is designed for. When this parser class
    # will load its configuration, will it open this file to get its settings data. The file name
    # must to be on the form `insert_spaces_inside_paren`.
    - rule_name: Insert spaces inside paren

    # This set on which languages this block should be included. Setting it to empty will allow
    # it to be parsed for any languages.
    - target_languages: Java, Octave, Matlab, C++, Pawn, C, Javascript

    # Inclusion Blocks:
    # This will set which regions are set to allow the insertion process to happens. Each settings
    # file can have from 1 until several inclusion blocks it wants to. For example, I can include
    # only the lines set with the `^\s*#define\s*.*` regex expression where the contents of the
    # regex expression match it. Defines a expression which will map the beginning of a
    # inclusion block. Setting this block to empty will include all the source code. Setting an
    # `Inclusion Block` after a `Exclusion Block` will perform the inclusion within that block.
    # Example, `/\*\*`
    #
    # Exclusion Blocks:
    # This will set which regions are set to not allow the insertion to happens. The final
    # operating region is the sequentially declarations' sum of the Inclusion/Exclusion Blocks
    # by their declarations order. Each settings file can have from 0 until several exclusion
    # blocks it wants to. Defines a expression which will map the beginning of a exclusion
    # block. Setting this block to empty will not exclude anything. Example, `/\*\*`
    - allowed_blocks: - c++_like_block_comment - Matlab_like_block_coment


tests:

    # First test to be performed for this setting. This sets the languages which this Unit
    # Test is valid to.
    - language: Java

    # Sets the file name where this test file contents is supposed to be in.
    - file: test.java

    # He we put the sample input data to be parsed and generate the final formatted/beautified
    # code.
    - input: |
        if(hi)

    # This is the first test expected result for this settings file. You must to let this
    # result exactly as you wish and properly set the settings to generate it.
    - output: |
        if( hi )

    # Here will be output the test result from the input data just above.
    - result: |
        if( hi )
