/*

Entrega 1 é:
O grafo de syntaxe da gramática gerado pelo http://bottlecaps.de/rr/ui ou similar
A gramática da linguagem
O programa que gera os tokens da linguagem com o seu identificador

http://bottlecaps.de/rr/ui
https://github.com/evandrocoan/AmxxEditor/blob/master/AmxxEditorPawn.sublime-syntax
https://www.sublimetext.com/docs/3/syntax.html
http://docs.sublimetext.info/en/latest/extensibility/syntaxdefs.html
http://docs.sublimetext.info/en/latest/reference/syntaxdefs.html

https://gist.github.com/tociyuki/3936873
https://stackoverflow.com/questions/27786191/how-to-represent-vertical-alignment-of-syntax-of-code-using-bnf-ebnf-or-etc
https://github.com/lark-parser/lark/blob/master/lark/grammars/common.lark

*/

// Example program:

name: Abstract Machine Language
scope: source.sma
contexts:
  include: numbers
  include: keywords
  include: function
  include: check_brackets

  match: (true|false)
    scope: constant.language

  include: Packages/AmxxEditor/AmxxEditorConsts.sublime-syntax

function:
  include: function_definition
  include: function_call

function_definition:
  match: ^[\s;]*(public|stock|native|forward)\s+([A-Za-z_]\w*:\s*)?([A-Za-z_][\w_]*)[\s]*(\()
    captures:
      1: storage.type.function.pawn
      2: storage.modifier.tag.pawn
      3: support.function.definition.pawn
      4: function.parens.pawn
    push:
      match: \)
        scope: function.parens.pawn
        pop: true
      include: main
      include: function_block
  match: '^[ ;]*([A-Za-z_]\w*:)?([A-Za-z_][\w_]*)[\s]*(\()'
    captures:
      1: storage.modifier.tag.pawn
      2: support.function.definition.pawn
      3: function.parens.pawn
    push:
      match: \)
        scope: function.parens.pawn
        pop: true
      include: main
      include: function_block

function_block:
  match: '\{'
    scope: punctuation.definition.group.start
    push:
      meta_scope: meta.block.pawn
      match: '\}'
        scope: punctuation.definition.group.end
        pop: true
      include: main
      include: function_call
  include: main


function_call:
  match: \s*([A-Za-z_][\w_]*)[\s|\\n]*(\()
    captures:
      1: support.function.call.pawn
      2: function.parens.pawn
    push:
      match: \)
        scope: function.parens.pawn
        pop: true
      include: main

numbers:
  match: '(\d+)(\.{2})(\d+)'
    captures:
      1: constant.numeric.int.pawn
      2: keyword.operator.switch-range.pawn
      3: constant.numeric.int.pawn

  match: ([-]?0x[\da-f]+)
    scope: constant.numeric.hex.pawn

  match: \b(\d+\.\d+)\b
    scope: constant.numeric.float.pawn

  match: \b(\d+)\b
    scope: constant.numeric.int.pawn

keywords:
  match: \s*(case\b([^:\n]*):)\s+
    captures:
      1: keyword.control.pawn
      2: storage.type.vars.pawn

  match: (~|&|\||\^|<<|>>)
    scope: keyword.operator.bitwise.pawn

  match: (\,|;)
    scope: keyword.coma.pawn

  match: ({|})
    scope: keyword.brace.pawn

parens:
  match: \(
    scope: parens.pawn
    push:
      meta_scope: meta.group.c
      match: \)
        scope: parens.pawn
        pop: true
      include: main

check_brackets:
  match: \)
    scope: invalid.illegal.stray-bracket-end


*/

